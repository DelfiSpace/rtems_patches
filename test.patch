diff --git a/bsps/arm/include/bsp/start.h b/bsps/arm/include/bsp/start.h
index d57e6ee..70c32a2 100644
--- a/bsps/arm/include/bsp/start.h
+++ b/bsps/arm/include/bsp/start.h
@@ -59,31 +59,31 @@ extern "C" {
 #define BSP_START_DATA_SECTION __attribute__((section(".bsp_start_data")))
 
 /**
-* @brief System start entry.
-*/
+ * @brief System start entry.
+ */
 void _start(void);
 
 /**
-* @brief Start entry hook 0.
-*
-* This hook will be called from the start entry code after all modes and
-* stack pointers are initialized but before the copying of the exception
-* vectors.
-*/
+ * @brief Start entry hook 0.
+ *
+ * This hook will be called from the start entry code after all modes and
+ * stack pointers are initialized but before the copying of the exception
+ * vectors.
+ */
 void bsp_start_hook_0(void);
 
 /**
-* @brief Can be used by bsp_start_hook_0() to jump back to the start code
-*   instead of using the link register.
-*/
+ * @brief Can be used by bsp_start_hook_0() to jump back to the start code
+ *   instead of using the link register.
+ */
 void bsp_start_hook_0_done(void);
 
 /**
-* @brief Start entry hook 1.
-*
-* This hook will be called from the start entry code after copying of the
-* exception vectors but before the call to boot_card().
-*/
+ * @brief Start entry hook 1.
+ *
+ * This hook will be called from the start entry code after copying of the
+ * exception vectors but before the call to boot_card().
+ */
 void bsp_start_hook_1(void);
 
 /**
@@ -102,47 +102,35 @@ void bsp_start_memcpy_arm(int *dest, const int *src, size_t n);
 /**
  * @brief Copies all standard sections from the load to the runtime area.
  */
-BSP_START_TEXT_SECTION static inline void bsp_start_copy_sections(void)
-{
+BSP_START_TEXT_SECTION static inline void bsp_start_copy_sections(void) {
   /* Copy .text section */
-  bsp_start_memcpy(
-    (int *) bsp_section_text_begin,
-    (const int *) bsp_section_text_load_begin,
-    (size_t) bsp_section_text_size
-  );
+  bsp_start_memcpy((int *)bsp_section_text_begin,
+                   (const int *)bsp_section_text_load_begin,
+                   (size_t)bsp_section_text_size);
 
   /* Copy .rodata section */
-  bsp_start_memcpy(
-    (int *) bsp_section_rodata_begin,
-    (const int *) bsp_section_rodata_load_begin,
-    (size_t) bsp_section_rodata_size
-  );
+  bsp_start_memcpy((int *)bsp_section_rodata_begin,
+                   (const int *)bsp_section_rodata_load_begin,
+                   (size_t)bsp_section_rodata_size);
 
   /* Copy .data section */
-  bsp_start_memcpy(
-    (int *) bsp_section_data_begin,
-    (const int *) bsp_section_data_load_begin,
-    (size_t) bsp_section_data_size
-  );
+  bsp_start_memcpy((int *)bsp_section_data_begin,
+                   (const int *)bsp_section_data_load_begin,
+                   (size_t)bsp_section_data_size);
 
   /* Copy .fast_text section */
-  bsp_start_memcpy(
-    (int *) bsp_section_fast_text_begin,
-    (const int *) bsp_section_fast_text_load_begin,
-    (size_t) bsp_section_fast_text_size
-  );
+  bsp_start_memcpy((int *)bsp_section_fast_text_begin,
+                   (const int *)bsp_section_fast_text_load_begin,
+                   (size_t)bsp_section_fast_text_size);
 
   /* Copy .fast_data section */
-  bsp_start_memcpy(
-    (int *) bsp_section_fast_data_begin,
-    (const int *) bsp_section_fast_data_load_begin,
-    (size_t) bsp_section_fast_data_size
-  );
+  bsp_start_memcpy((int *)bsp_section_fast_data_begin,
+                   (const int *)bsp_section_fast_data_load_begin,
+                   (size_t)bsp_section_fast_data_size);
 }
 
 BSP_START_TEXT_SECTION static inline void
-bsp_start_memcpy_libc(void *dest, const void *src, size_t n)
-{
+bsp_start_memcpy_libc(void *dest, const void *src, size_t n) {
   if (dest != src) {
     memcpy(dest, src, n);
   }
@@ -155,33 +143,25 @@ bsp_start_memcpy_libc(void *dest, const void *src, size_t n)
  * Works only in case the .start, .text and .rodata sections reside in one
  * memory region.
  */
-BSP_START_TEXT_SECTION static inline void bsp_start_copy_sections_compact(void)
-{
+BSP_START_TEXT_SECTION static inline void
+bsp_start_copy_sections_compact(void) {
   /* Copy .data section */
-  bsp_start_memcpy_libc(
-    bsp_section_data_begin,
-    bsp_section_data_load_begin,
-    (size_t) bsp_section_data_size
-  );
+  bsp_start_memcpy_libc(bsp_section_data_begin, bsp_section_data_load_begin,
+                        (size_t)bsp_section_data_size);
 
   /* Copy .fast_text section */
-  bsp_start_memcpy_libc(
-    bsp_section_fast_text_begin,
-    bsp_section_fast_text_load_begin,
-    (size_t) bsp_section_fast_text_size
-  );
+  bsp_start_memcpy_libc(bsp_section_fast_text_begin,
+                        bsp_section_fast_text_load_begin,
+                        (size_t)bsp_section_fast_text_size);
 
   /* Copy .fast_data section */
-  bsp_start_memcpy_libc(
-    bsp_section_fast_data_begin,
-    bsp_section_fast_data_load_begin,
-    (size_t) bsp_section_fast_data_size
-  );
+  bsp_start_memcpy_libc(bsp_section_fast_data_begin,
+                        bsp_section_fast_data_load_begin,
+                        (size_t)bsp_section_fast_data_size);
 }
 
-BSP_START_TEXT_SECTION static inline void bsp_start_clear_bss(void)
-{
-  memset(bsp_section_bss_begin, 0, (size_t) bsp_section_bss_size);
+BSP_START_TEXT_SECTION static inline void bsp_start_clear_bss(void) {
+  memset(bsp_section_bss_begin, 0, 30);
 }
 
 /** @} */
